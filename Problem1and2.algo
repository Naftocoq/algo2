// Problem 1

ALGORITHM Problem 1
VAR
    i,j,sum : INTEGER;
    arr1 : ARRAY_OF INTEGER[];
    arr2: ARRAY_OF INTEGER[];
    m: length arr1
    n=length arr2
    sum=0;

BEGIN
    FOR i FROM 0 TO m-1 DO
        FOR j FROM 0 TO n-1   DO
        IF arr1[i] == arr2[j] THEN
        BREAK; 
        ELSE sum= sum + arr1[i]
        END_IF
        END_FOR
    END_FOR
    // No need to create sum1 and sum2
    FOR j FROM 0 TO n-1 DO
        FOR i FROM 0 TO m-1   DO
         IF arr2[j] == arr1[i] THEN
        BREAK; 
        ELSE sum= sum + arr2[j]
        END_IF
        END_FOR
    END_FOR

    Write sum


// Problem 1 with procedure

PROCEDURE dot_product(v1,v2 : ARRAY_OF INTEGER, VAR dot : INTEGER)
VAR
    i : INTEGER;
BEGIN
    dot :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculate dot product");
        dot := NaN; // NaN : not definte number
    END_IF
    WHILE (i < v1.length ) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
END
// 2) 
ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [50];
    dot : INTEGER;
BEGIN
    // Read Size of elements of V1 
    n1 := read_size();
    // Read elements of V1
    read_array(n1,v1);
    // Read Size of elements of V2 
    n2 := read_size();
    // Read elements of V2
    read_array(n2,v2);

    dot_product(v1,v2,dot);
    IF (dot == 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END

// Problem 2 with function


FUNCTION dot_product(v1,v2:ARRAY_OF INTEGER) : INTEGER
VAR
    dot: INTEGER, 
    i: INTEGER,
    dot :=0;
    i:=0;
BEGIN
        IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculate dot product");
        dot := NaN; // NaN : not definte number
    END_IF
    WHILE (i < v1.length ) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
    RETURN dot
END

// 2)
ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [50];
BEGIN
    // Read Size of elements of V1 
    n1 := read_size();
    // Read elements of V1
    read_array(n1,v1);
    // Read Size of elements of V2 
    n2 := read_size();
    // Read elements of V2
    read_array(n2,v2);
    
    dot := dot_product(v1,v2);
    IF (dot == 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END

// Thanks KARIM :)